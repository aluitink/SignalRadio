services:
  # SQL Server Database with Full Text Search
  sqlserver:
    build:
      context: .
      dockerfile: docker/Dockerfile.mssql
    container_name: signalradio-sqlserver
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=SignalRadio123!
      - MSSQL_PID=Express
    volumes:
      - sqlserver-data:/var/opt/mssql
    networks:
      - signalradio-network
    restart: unless-stopped
    # Memory limit set to 2GB
    mem_limit: 2g

  # SignalRadio API Service
  signalradio-api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: signalradio-api
    ports:
      - "5000:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - StorageType=Local
      - AzureStorage__ConnectionString=${AzureStorage__ConnectionString}
      - AzureStorage__ContainerName=${AzureStorage__ContainerName}
      - ConnectionStrings__DefaultConnection=Server=sqlserver,1433;Database=SignalRadio;User Id=sa;Password=SignalRadio123!;TrustServerCertificate=true;
      - AsrSettings__Enabled=${ASR_ENABLED:-true}
      - AsrSettings__WhisperServiceUrl=http://whisper-asr:9000
      - AsrSettings__AutoTranscribe=${ASR_AUTO_TRANSCRIBE:-true}
      - LocalFileCache__CacheDirectory=${LOCALFILECACHE__CACHEDIRECTORY:-/tmp/signalradio-cache}
      - LocalFileCache__CacheDurationMinutes=${LOCALFILECACHE__CACHEDURATIONMINUTES:-10}
    volumes:
      # Temporary processing (named volume)
      - temp:/app/temp
      # Local recordings storage (make local storage the default mount)
      - api-recordings:/data/recordings
      # Configuration files (if needed for API settings)
      - ./config:/app/config:ro
    networks:
      - signalradio-network
    depends_on:
      - sqlserver
    restart: unless-stopped

  # SignalRadio UI Service
  signalradio-ui:
    build:
      context: ./src/SignalRadio.UI
      dockerfile: Dockerfile
    container_name: signalradio-ui
    expose:
      - "80"
    ports:
      - "3000:80"
    environment:
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-Password1}
    networks:
      - signalradio-network
    depends_on:
      - signalradio-api
    restart: unless-stopped

  # Trunk Recorder Service
  trunk-recorder:
    image: robotastic/trunk-recorder:latest
    container_name: trunk-recorder
    command: ["trunk-recorder", "--config=/app/config/trunk-recorder.json"]
    volumes:
      - /var/run/dbus:/var/run/dbus 
      - /var/run/avahi-daemon/socket:/var/run/avahi-daemon/socket
      # Configuration files (external)
      - ./config:/app/config:ro
      # Scripts (external)
      - ./scripts:/app/scripts:ro
      # Audio recordings (named volume)
      - trunk-recordings:/app/audio
      # Temporary processing (named volume)
      - temp:/app/temp
      # Logs
      - logs:/app/logs
    environment:
      - UPLOAD_SCRIPT=/app/scripts/upload_callback.sh
      - API_ENDPOINT=http://signalradio-api:8080/api/recording/upload
    networks:
      - signalradio-network
    depends_on:
      - signalradio-api
    restart: unless-stopped
    # Note: trunk-recorder needs RTL-SDR hardware access
    devices:
      - /dev/bus/usb:/dev/bus/usb:rwm
    privileged: true

  # Whisper ASR Service
  whisper-asr:
    image: onerahmet/openai-whisper-asr-webservice:latest
    container_name: signalradio-whisper
    environment:
      - ASR_MODEL=small.en
      - ASR_ENGINE=openai_whisper
      - ASR_DEVICE=cpu
    ports:
      - "9000:9000"
    volumes:
      # Model cache to avoid re-downloading
      - whisper-cache:/root/.cache
    networks:
      - signalradio-network
    depends_on:
      - sqlserver
    restart: unless-stopped
    # Memory limit for Whisper models
    mem_limit: 4g

networks:
  signalradio-network:
    driver: bridge

volumes:
  # Named volumes for persistent data
  api-recordings:
    driver: local
  trunk-recordings:
    driver: local
  temp:
    driver: local
  logs:
    driver: local
  sqlserver-data:
    driver: local
  whisper-cache:
    driver: local
