// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SignalRadio.DataAccess;

#nullable disable

namespace SignalRadio.Api.Migrations
{
    [DbContext(typeof(SignalRadioDbContext))]
    [Migration("20250901014500_AddTalkGroupFields")]
    partial class AddTalkGroupFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SignalRadio.DataAccess.Call", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreatedAtUtc");

                    b.Property<int>("DurationSeconds")
                        .HasColumnType("int");

                    b.Property<double>("FrequencyHz")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("RecordingTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("RecordingTimeUtc");

                    b.Property<int>("TalkGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TalkGroupId", "RecordingTime");

                    b.ToTable("Calls");
                });

            modelBuilder.Entity("SignalRadio.DataAccess.Recording", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CallId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("ReceivedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("ReceivedAtUtc");

                    b.Property<long>("SizeBytes")
                        .HasColumnType("bigint");

                    b.Property<int>("StorageLocationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CallId");

                    b.HasIndex("ReceivedAt")
                        .IsDescending();

                    b.HasIndex("StorageLocationId");

                    b.ToTable("Recordings");
                });

            modelBuilder.Entity("SignalRadio.DataAccess.StorageLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreatedAtUtc");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<string>("LocationUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetadataJson")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StorageLocations");
                });

            modelBuilder.Entity("SignalRadio.DataAccess.TalkGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AlphaTag")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AlphaTag");

                    b.HasIndex("Category");

                    b.HasIndex("Number");

                    b.HasIndex("Priority");

                    b.HasIndex("Tag");

                    b.ToTable("TalkGroups");
                });

            modelBuilder.Entity("SignalRadio.DataAccess.Transcription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalDataJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Confidence")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreatedAtUtc");

                    b.Property<string>("FullText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecordingId")
                        .HasColumnType("int");

                    b.Property<string>("Service")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Service");

                    b.HasIndex("RecordingId", "IsFinal");

                    b.ToTable("Transcriptions");
                });

            modelBuilder.Entity("SignalRadio.DataAccess.Call", b =>
                {
                    b.HasOne("SignalRadio.DataAccess.TalkGroup", "TalkGroup")
                        .WithMany("Calls")
                        .HasForeignKey("TalkGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TalkGroup");
                });

            modelBuilder.Entity("SignalRadio.DataAccess.Recording", b =>
                {
                    b.HasOne("SignalRadio.DataAccess.Call", "Call")
                        .WithMany("Recordings")
                        .HasForeignKey("CallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SignalRadio.DataAccess.StorageLocation", "StorageLocation")
                        .WithMany("Recordings")
                        .HasForeignKey("StorageLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Call");

                    b.Navigation("StorageLocation");
                });

            modelBuilder.Entity("SignalRadio.DataAccess.Transcription", b =>
                {
                    b.HasOne("SignalRadio.DataAccess.Recording", "Recording")
                        .WithMany("Transcriptions")
                        .HasForeignKey("RecordingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recording");
                });

            modelBuilder.Entity("SignalRadio.DataAccess.Call", b =>
                {
                    b.Navigation("Recordings");
                });

            modelBuilder.Entity("SignalRadio.DataAccess.Recording", b =>
                {
                    b.Navigation("Transcriptions");
                });

            modelBuilder.Entity("SignalRadio.DataAccess.StorageLocation", b =>
                {
                    b.Navigation("Recordings");
                });

            modelBuilder.Entity("SignalRadio.DataAccess.TalkGroup", b =>
                {
                    b.Navigation("Calls");
                });
#pragma warning restore 612, 618
        }
    }
}
