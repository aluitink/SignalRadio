// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SignalRadio.DataAccess;

#nullable disable

namespace SignalRadio.Api.Migrations
{
    [DbContext(typeof(SignalRadioDbContext))]
    [Migration("20250909165028_AtomizeTranscriptSummaries")]
    partial class AtomizeTranscriptSummaries
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SignalRadio.DataAccess.Call", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreatedAtUtc");

                    b.Property<int>("DurationSeconds")
                        .HasColumnType("int");

                    b.Property<double>("FrequencyHz")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("RecordingTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("RecordingTimeUtc");

                    b.Property<int>("TalkGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TalkGroupId", "RecordingTime");

                    b.ToTable("Calls");
                });

            modelBuilder.Entity("SignalRadio.DataAccess.NotableIncident", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreatedAtUtc");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("ImportanceScore")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ImportanceScore");

                    b.ToTable("NotableIncidents");
                });

            modelBuilder.Entity("SignalRadio.DataAccess.NotableIncidentCall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CallId")
                        .HasColumnType("int");

                    b.Property<string>("CallNote")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreatedAtUtc");

                    b.Property<int>("NotableIncidentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CallId");

                    b.HasIndex("NotableIncidentId");

                    b.HasIndex("NotableIncidentId", "CallId")
                        .IsUnique();

                    b.ToTable("NotableIncidentCalls");
                });

            modelBuilder.Entity("SignalRadio.DataAccess.Recording", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CallId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("ReceivedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("ReceivedAtUtc");

                    b.Property<long>("SizeBytes")
                        .HasColumnType("bigint");

                    b.Property<int>("StorageLocationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CallId");

                    b.HasIndex("ReceivedAt")
                        .IsDescending();

                    b.HasIndex("StorageLocationId");

                    b.ToTable("Recordings");
                });

            modelBuilder.Entity("SignalRadio.DataAccess.StorageLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreatedAtUtc");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<string>("LocationUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetadataJson")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StorageLocations");
                });

            modelBuilder.Entity("SignalRadio.DataAccess.TalkGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AlphaTag")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AlphaTag");

                    b.HasIndex("Category");

                    b.HasIndex("Number");

                    b.HasIndex("Priority");

                    b.HasIndex("Tag");

                    b.ToTable("TalkGroups");
                });

            modelBuilder.Entity("SignalRadio.DataAccess.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreatedAtUtc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("SignalRadio.DataAccess.TranscriptSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreatedAtUtc");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("EndTimeUtc");

                    b.Property<DateTimeOffset>("GeneratedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("GeneratedAtUtc");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("StartTimeUtc");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TalkGroupId")
                        .HasColumnType("int");

                    b.Property<double>("TotalDurationSeconds")
                        .HasColumnType("float");

                    b.Property<int>("TranscriptCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TalkGroupId", "GeneratedAt");

                    b.HasIndex("TalkGroupId", "StartTime", "EndTime");

                    b.ToTable("TranscriptSummaries");
                });

            modelBuilder.Entity("SignalRadio.DataAccess.TranscriptSummaryNotableCall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CallId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreatedAtUtc");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("ImportanceScore")
                        .HasColumnType("float");

                    b.Property<int>("TranscriptSummaryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CallId");

                    b.HasIndex("TranscriptSummaryId");

                    b.ToTable("TranscriptSummaryNotableCalls");
                });

            modelBuilder.Entity("SignalRadio.DataAccess.TranscriptSummaryNotableIncident", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreatedAtUtc");

                    b.Property<int>("NotableIncidentId")
                        .HasColumnType("int");

                    b.Property<int>("TranscriptSummaryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NotableIncidentId");

                    b.HasIndex("TranscriptSummaryId");

                    b.HasIndex("TranscriptSummaryId", "NotableIncidentId")
                        .IsUnique();

                    b.ToTable("TranscriptSummaryNotableIncidents");
                });

            modelBuilder.Entity("SignalRadio.DataAccess.TranscriptSummaryTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreatedAtUtc");

                    b.Property<double?>("Relevance")
                        .HasColumnType("float");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.Property<int>("TranscriptSummaryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.HasIndex("TranscriptSummaryId");

                    b.HasIndex("TranscriptSummaryId", "TopicId")
                        .IsUnique();

                    b.ToTable("TranscriptSummaryTopics");
                });

            modelBuilder.Entity("SignalRadio.DataAccess.Transcription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalDataJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Confidence")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreatedAtUtc");

                    b.Property<string>("FullText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecordingId")
                        .HasColumnType("int");

                    b.Property<string>("Service")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Service");

                    b.HasIndex("RecordingId", "IsFinal");

                    b.ToTable("Transcriptions");
                });

            modelBuilder.Entity("SignalRadio.DataAccess.Call", b =>
                {
                    b.HasOne("SignalRadio.DataAccess.TalkGroup", "TalkGroup")
                        .WithMany("Calls")
                        .HasForeignKey("TalkGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TalkGroup");
                });

            modelBuilder.Entity("SignalRadio.DataAccess.NotableIncidentCall", b =>
                {
                    b.HasOne("SignalRadio.DataAccess.Call", "Call")
                        .WithMany()
                        .HasForeignKey("CallId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SignalRadio.DataAccess.NotableIncident", "NotableIncident")
                        .WithMany("NotableIncidentCalls")
                        .HasForeignKey("NotableIncidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Call");

                    b.Navigation("NotableIncident");
                });

            modelBuilder.Entity("SignalRadio.DataAccess.Recording", b =>
                {
                    b.HasOne("SignalRadio.DataAccess.Call", "Call")
                        .WithMany("Recordings")
                        .HasForeignKey("CallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SignalRadio.DataAccess.StorageLocation", "StorageLocation")
                        .WithMany("Recordings")
                        .HasForeignKey("StorageLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Call");

                    b.Navigation("StorageLocation");
                });

            modelBuilder.Entity("SignalRadio.DataAccess.TranscriptSummary", b =>
                {
                    b.HasOne("SignalRadio.DataAccess.TalkGroup", "TalkGroup")
                        .WithMany()
                        .HasForeignKey("TalkGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TalkGroup");
                });

            modelBuilder.Entity("SignalRadio.DataAccess.TranscriptSummaryNotableCall", b =>
                {
                    b.HasOne("SignalRadio.DataAccess.Call", "Call")
                        .WithMany()
                        .HasForeignKey("CallId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SignalRadio.DataAccess.TranscriptSummary", "TranscriptSummary")
                        .WithMany()
                        .HasForeignKey("TranscriptSummaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Call");

                    b.Navigation("TranscriptSummary");
                });

            modelBuilder.Entity("SignalRadio.DataAccess.TranscriptSummaryNotableIncident", b =>
                {
                    b.HasOne("SignalRadio.DataAccess.NotableIncident", "NotableIncident")
                        .WithMany("TranscriptSummaryNotableIncidents")
                        .HasForeignKey("NotableIncidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SignalRadio.DataAccess.TranscriptSummary", "TranscriptSummary")
                        .WithMany("TranscriptSummaryNotableIncidents")
                        .HasForeignKey("TranscriptSummaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotableIncident");

                    b.Navigation("TranscriptSummary");
                });

            modelBuilder.Entity("SignalRadio.DataAccess.TranscriptSummaryTopic", b =>
                {
                    b.HasOne("SignalRadio.DataAccess.Topic", "Topic")
                        .WithMany("TranscriptSummaryTopics")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SignalRadio.DataAccess.TranscriptSummary", "TranscriptSummary")
                        .WithMany("TranscriptSummaryTopics")
                        .HasForeignKey("TranscriptSummaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");

                    b.Navigation("TranscriptSummary");
                });

            modelBuilder.Entity("SignalRadio.DataAccess.Transcription", b =>
                {
                    b.HasOne("SignalRadio.DataAccess.Recording", "Recording")
                        .WithMany("Transcriptions")
                        .HasForeignKey("RecordingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recording");
                });

            modelBuilder.Entity("SignalRadio.DataAccess.Call", b =>
                {
                    b.Navigation("Recordings");
                });

            modelBuilder.Entity("SignalRadio.DataAccess.NotableIncident", b =>
                {
                    b.Navigation("NotableIncidentCalls");

                    b.Navigation("TranscriptSummaryNotableIncidents");
                });

            modelBuilder.Entity("SignalRadio.DataAccess.Recording", b =>
                {
                    b.Navigation("Transcriptions");
                });

            modelBuilder.Entity("SignalRadio.DataAccess.StorageLocation", b =>
                {
                    b.Navigation("Recordings");
                });

            modelBuilder.Entity("SignalRadio.DataAccess.TalkGroup", b =>
                {
                    b.Navigation("Calls");
                });

            modelBuilder.Entity("SignalRadio.DataAccess.Topic", b =>
                {
                    b.Navigation("TranscriptSummaryTopics");
                });

            modelBuilder.Entity("SignalRadio.DataAccess.TranscriptSummary", b =>
                {
                    b.Navigation("TranscriptSummaryNotableIncidents");

                    b.Navigation("TranscriptSummaryTopics");
                });
#pragma warning restore 612, 618
        }
    }
}
